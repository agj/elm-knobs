module KeepOpenTests exposing (..)

import Expect exposing (Expectation)
import Fuzz
import Internal.Constants
import Knob exposing (Knob)
import Test
import Test.Html.Selector as Selector
import Util.TestKnob exposing (Vegetable(..), fuzzColor, knobSelect, vegetables, viewHas, viewHasNot)


initialStateTests =
    Test.describe "Lets the panel close by default"
        [ Test.fuzz Fuzz.niceFloat "float" <|
            \float ->
                Knob.float { step = 0.1, initial = float }
                    |> viewIsNotKeptOpen
        , Test.fuzz (Fuzz.floatRange -9999 9999) "floatConstrained" <|
            \float ->
                Knob.floatConstrained { range = ( -9999, 9999 ), step = 0.1, initial = float }
                    |> viewIsNotKeptOpen
        , Test.fuzz (Fuzz.floatRange -9999 9999) "floatSlider" <|
            \float ->
                Knob.floatSlider { range = ( -9999, 9999 ), step = 0.1, initial = float }
                    |> viewIsNotKeptOpen
        , Test.fuzz Fuzz.int "int" <|
            \int ->
                Knob.int { step = 1, initial = int }
                    |> viewIsNotKeptOpen
        , Test.fuzz (Fuzz.intRange -1000 1000) "intConstrained" <|
            \int ->
                Knob.intConstrained { step = 1, range = ( -1000, 1000 ), initial = int }
                    |> viewIsNotKeptOpen
        , Test.fuzz (Fuzz.intRange -1000 1000) "intSlider" <|
            \int ->
                Knob.intSlider { step = 1, range = ( -1000, 1000 ), initial = int }
                    |> viewIsNotKeptOpen
        , Test.fuzz Fuzz.string "stringInput" <|
            \string ->
                Knob.stringInput string
                    |> viewIsNotKeptOpen
        , Test.fuzz Fuzz.string "stringTextarea" <|
            \string ->
                Knob.stringTextarea { columns = Nothing, rows = Nothing, initial = string }
                    |> viewIsNotKeptOpen
        , Test.fuzz Fuzz.bool "boolCheckbox" <|
            \bool ->
                Knob.boolCheckbox bool
                    |> viewIsNotKeptOpen
        , Test.fuzz2 (Fuzz.oneOfValues vegetables) (Fuzz.oneOfValues vegetables) "select" <|
            \default initial ->
                knobSelect default initial
                    |> .knob
                    |> viewIsNotKeptOpen
        , Test.fuzz fuzzColor "colorPicker" <|
            \color ->
                Knob.colorPicker color
                    |> viewIsNotKeptOpen
        , Test.fuzz
            (Fuzz.triple Fuzz.int (Fuzz.oneOfValues vegetables) Fuzz.niceFloat)
            "compose"
          <|
            \( int, vegetable, float ) ->
                Knob.compose (\a b c -> ( a, b, c ))
                    |> Knob.stack (Knob.int { step = 1, initial = int })
                    |> Knob.stack (knobSelect Carrot vegetable |> .knob)
                    |> Knob.stack (Knob.float { step = 1, initial = float })
                    |> viewIsNotKeptOpen
        , Test.fuzz
            (Fuzz.triple Fuzz.int (Fuzz.oneOfValues vegetables) Fuzz.niceFloat)
            "compose with label"
          <|
            \( int, vegetable, float ) ->
                Knob.compose (\a b c -> ( a, b, c ))
                    |> Knob.stackLabel "int" (Knob.int { step = 1, initial = int })
                    |> Knob.stackLabel "select" (knobSelect Carrot vegetable |> .knob)
                    |> Knob.stackLabel "float" (Knob.float { step = 1, initial = float })
                    |> viewIsNotKeptOpen
        , Test.fuzz2 (Fuzz.oneOfValues vegetables) (Fuzz.oneOfValues vegetables) "map" <|
            \default initial ->
                let
                    { knob, toString } =
                        knobSelect default initial
                in
                knob
                    |> Knob.map (\val -> toString val ++ "!")
                    |> viewIsNotKeptOpen
        ]



-- UTILITIES


viewIsKeptOpen : Knob a -> Expectation
viewIsKeptOpen =
    viewHas [ Selector.class Internal.Constants.keepOpenCssClass ]


viewIsNotKeptOpen : Knob a -> Expectation
viewIsNotKeptOpen =
    viewHasNot [ Selector.class Internal.Constants.keepOpenCssClass ]
